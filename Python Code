# Replace with your Discogs API credentials
consumer_key = 'mJEsOhslNJJbQVBpBxwF'
consumer_secret = 'VGacJtQoYmlQWjEZKlFaUBktxVNKfeyb'
user_agent = 'MyDiscogsApp/2.0'

# Discogs OAuth URLs
request_token_url = 'https://api.discogs.com/oauth/request_token'
authorize_url = 'https://www.discogs.com/oauth/authorize'
access_token_url = 'https://api.discogs.com/oauth/access_token'
def get_oauth_token():
    
    # Create OAuth1 session
    discogs_oauth = OAuth1Session(consumer_key, client_secret=consumer_secret)
    
    # Get request token (retry if expired)
    while True:
        try:
            fetch_response = discogs_oauth.fetch_request_token(request_token_url)
            resource_owner_key = fetch_response.get('oauth_token')
            resource_owner_secret = fetch_response.get('oauth_token_secret')
            break  # Exit the loop if successful
        except requests_oauthlib.oauth1_session.TokenRequestDenied as e:
            print(f"Request token expired. Retrying... {e}")
            
    # Get authorization
    authorization_url = discogs_oauth.authorization_url(authorize_url)
    print(f'Please go here and authorize: {authorization_url}')
    verifier = input('Paste the verification code here: ')
    
    # Get the access token
    oauth_tokens = discogs_oauth.fetch_access_token(
        access_token_url,
        verifier=verifier
    )
    return oauth_tokens['oauth_token'], oauth_tokens['oauth_token_secret']

# Get OAuth token (you only need to do this once)
access_token, access_token_secret = get_oauth_token()

# Initialize Discogs client with OAuth (move this before the functions)
discogs = discogs_client.Client(
    user_agent,
    consumer_key=consumer_key,
    consumer_secret=consumer_secret,
    token=access_token,
    secret=access_token_secret
)

CONDITIONS = ["Mint (M)", "Near Mint (NM or M-)", "Very Good Plus (VG+)", 
              "Very Good (VG)", "Good Plus (G+)", "Good (G)", "Fair (F)", "Poor (P)"]
def search_album():
    query = entry.get()
    condition = condition_var.get()
    try:
        # Try to search by barcode first
        results = discogs.search(query, type='release')
        if not results:
            # If no results, try searching by release ID
            try:
                release_id = int(query)
                display_result(release_id, condition)  # Use release ID directly
            except ValueError:
                messagebox.showerror("Error", "Invalid Release ID.")
        else:
            display_result(results[0].id, condition)  # Pass release ID
    except Exception as e:
        messagebox.showerror("Error", str(e))
def get_historical_data(release):
    # Get historical sales data
    try:
        if hasattr(release, 'marketplace_stats'):
            marketplace_data = release.marketplace_stats
            return marketplace_data
        else:
            messagebox.showerror("Error", "No sales data available for this release.")
            return None  # Return None if no data is found
    except Exception as e:
        messagebox.showerror("Error", f"Error retrieving sales data: {e}")
        return None 
def estimate_price(condition, historical_data):
    
    # Estimate price based on condition and historical data
    if historical_data is not None:
        condition_multipliers = {
            "Mint (M)": 1.0,
            "Near Mint (NM or M-)": 0.9,
            "Very Good Plus (VG+)": 0.75,
            "Very Good (VG)": 0.5,
            "Good Plus (G+)": 0.35,
            "Good (G)": 0.25,
            "Fair (F)": 0.15,
            "Poor (P)": 0.1
        }
        base_price = historical_data['median']
        return base_price * condition_multipliers[condition]
    else:
        return None  # Return None if historical_data is None
def display_result(release_id, condition):
    # Clear previous results
    for widget in result_frame.winfo_children():
        widget.destroy()

    # Fetch marketplace data using release ID
    try:
        response = requests.get(f"https://api.discogs.com/releases/{release_id}/market", headers={'Authorization': f"Discogs token={access_token}"})
        response.raise_for_status()  # Raise an exception for bad status codes
        marketplace_data = response.json()
        
        # ... (rest of the display_result function)
        
        # Display price information
        if marketplace_data['lowest_price'] is not None:
            tk.Label(result_frame, text=f"Lowest Price: ${marketplace_data['lowest_price']:.2f}").pack()
            tk.Label(result_frame, text=f"Number of Listings: {marketplace_data['num_for_sale']}").pack()
        else:
            tk.Label(result_frame, text=f"No listings available or release is blocked for sale.").pack()

        # ... (rest of the display_result function)

    except requests.exceptions.RequestException as e:
        if isinstance(e, requests.exceptions.HTTPError) and e.response.status_code == 404:
            messagebox.showerror("Error", f"Release not found. Please check the Release ID.")
        else:
            messagebox.showerror("Error", f"Error retrieving marketplace data: {e}")

# Create main window
root = tk.Tk()
root.title("Vinyl Album Value Finder")

# Create and pack widgets
tk.Label(root, text="Enter Barcode or Release ID:").pack()
entry = tk.Entry(root, width=50)
entry.pack()

# Condition dropdown
tk.Label(root, text="Condition:").pack()
condition_var = tk.StringVar(root)
condition_var.set(CONDITIONS[0])  # default value
condition_dropdown = ttk.Combobox(root, textvariable=condition_var, values=CONDITIONS)
condition_dropdown.pack()
tk.Button(root, text="Search", command=search_album).pack()
result_frame = tk.Frame(root)
result_frame.pack(pady=20)

# Start the GUI event loop
root.mainloop()
